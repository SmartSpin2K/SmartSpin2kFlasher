name: Build

on:
  push:
    branches: [ main, master ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  tag-and-release:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Get latest tag and increment
        id: tag
        run: |
          git fetch --tags
          # Get only properly formatted version tags (vX.Y.Z)
          latest_tag=$(git tag -l | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | sort -V | tail -n1)
          if [ -z "$latest_tag" ]; then
            new_tag="v0.0.1"
          else
            # Extract version numbers using grep
            if [[ $latest_tag =~ v([0-9]+)\.([0-9]+)\.([0-9]+) ]]; then
              major="${BASH_REMATCH[1]}"
              minor="${BASH_REMATCH[2]}"
              patch="${BASH_REMATCH[3]}"
              
              # Increment patch version
              patch=$((patch + 1))
              if [ $patch -gt 9 ]; then
                patch=0
                minor=$((minor + 1))
                if [ $minor -gt 9 ]; then
                  minor=0
                  major=$((major + 1))
                fi
              fi
              
              # Ensure major doesn't exceed 99
              if [ $major -gt 99 ]; then
                echo "Error: Version exceeded v99.9.9"
                exit 1
              fi
              
              new_tag="v${major}.${minor}.${patch}"
            else
              echo "Error: Invalid tag format found"
              exit 1
            fi
          fi
          echo "new_tag=$new_tag" >> $GITHUB_OUTPUT
          
      - name: Create and push new tag
        run: |
          git tag ${{ steps.tag.outputs.new_tag }}
          git push origin ${{ steps.tag.outputs.new_tag }}

  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
        python-version: ['3.10']
        include:
          # Special build for ChromeOS/Linux (Debian-based)
          - os: ubuntu-latest
            python-version: '3.10'
            target: chromeos

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install Linux dependencies
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libgtk-3-dev
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements_build.txt
        pip install pyinstaller
        pip install ifaddr==0.2.0
        
    - name: Build with PyInstaller (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        python -m PyInstaller --clean --onefile --windowed --icon=icon.ico --name=SmartSpin2kFlasher smartspin2kflasher/__main__.py
        mv dist/SmartSpin2kFlasher.exe dist/SmartSpin2kFlasher-windows.exe

    - name: Build with PyInstaller (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        python -m PyInstaller --clean --onefile --windowed --icon=icon.icns --name=SmartSpin2kFlasher smartspin2kflasher/__main__.py
        mv dist/SmartSpin2kFlasher dist/SmartSpin2kFlasher-macos.app

    - name: Build with PyInstaller (ChromeOS/Linux)
      if: matrix.target == 'chromeos'
      run: |
        python -m PyInstaller --clean --onefile \
          --windowed \
          --icon=icon.ico \
          --name=SmartSpin2kFlasher \
          --target-arch x86_64 \
          --hidden-import='pkg_resources.py2_warn' \
          smartspin2kflasher/__main__.py
        # Create both ChromeOS and Linux versions from the same build
        cp dist/SmartSpin2kFlasher dist/SmartSpin2kFlasher-chromeos.AppImage
        cp dist/SmartSpin2kFlasher dist/SmartSpin2kFlasher-linux.AppImage

    - name: Upload Windows artifacts
      if: matrix.os == 'windows-latest'
      uses: actions/upload-artifact@v4
      with:
        name: SmartSpin2kFlasher-windows
        path: dist/SmartSpin2kFlasher-windows.exe

    - name: Upload macOS artifacts
      if: matrix.os == 'macos-latest'
      uses: actions/upload-artifact@v4
      with:
        name: SmartSpin2kFlasher-macos
        path: dist/SmartSpin2kFlasher-macos.app

    - name: Upload ChromeOS/Linux artifacts
      if: matrix.target == 'chromeos'
      uses: actions/upload-artifact@v4
      with:
        name: SmartSpin2kFlasher-linux
        path: |
          dist/SmartSpin2kFlasher-chromeos.AppImage
          dist/SmartSpin2kFlasher-linux.AppImage

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')

    steps:
    - uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v1
      with:
        files: artifacts/**/*
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
