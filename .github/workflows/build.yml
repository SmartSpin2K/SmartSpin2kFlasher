name: Build

on:
  push:
    branches: [ main, master ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  tag-and-release:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Get latest tag and increment
        id: tag
        run: |
          git fetch --tags
          latest_tag=$(git tag -l 'v*' | sort -V | tail -n1)
          if [ -z "$latest_tag" ]; then
            new_tag="v0.0.1"
          else
            # Extract numbers
            major=$(echo $latest_tag | sed 's/v\([0-9]\+\)\.\([0-9]\+\)\.\([0-9]\+\)/\1/')
            minor=$(echo $latest_tag | sed 's/v\([0-9]\+\)\.\([0-9]\+\)\.\([0-9]\+\)/\2/')
            patch=$(echo $latest_tag | sed 's/v\([0-9]\+\)\.\([0-9]\+\)\.\([0-9]\+\)/\3/')
            
            # Increment according to rules
            if [ "$patch" -eq 9 ]; then
              patch=0
              if [ "$minor" -eq 9 ]; then
                minor=0
                major=$((major + 1))
              else
                minor=$((minor + 1))
              fi
            else
              patch=$((patch + 1))
            fi
            
            # Ensure major doesn't exceed 99
            if [ "$major" -gt 99 ]; then
              echo "Error: Version exceeded v99.9.9"
              exit 1
            fi
            
            new_tag="v$major.$minor.$patch"
          fi
          echo "new_tag=$new_tag" >> $GITHUB_OUTPUT
          
      - name: Create and push new tag
        run: |
          git tag ${{ steps.tag.outputs.new_tag }}
          git push origin ${{ steps.tag.outputs.new_tag }}

  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
        python-version: ['3.10']
        include:
          # Special build for ChromeOS (Debian-based)
          - os: ubuntu-latest
            python-version: '3.10'
            target: chromeos

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install Linux dependencies
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libgtk-3-dev
        
    - name: Install dependencies (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements_build.txt
        pip install pyinstaller
        pip install ifaddr==0.2.0

    - name: Install dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements_build.txt
        pip install pyinstaller
        pip install ifaddr==0.2.0
        pip install esptool==4.8.1 requests>=2.26.0,<3
        pip install wxPython-4.2.1-cp310-cp310-macosx_10_10_universal2.whl --find-links https://wxpython.org/Phoenix/release-extras/

    - name: Install dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements_build.txt
        pip install pyinstaller
        pip install ifaddr==0.2.0
        pip install esptool==4.8.1 requests>=2.26.0,<3
        pip install wxPython-4.2.1-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl --find-links https://wxpython.org/Phoenix/release-extras/
        
    - name: Build with PyInstaller (Windows/Linux)
      if: matrix.os != 'macos-latest' && matrix.target != 'chromeos'
      run: |
        python -m PyInstaller --clean --onefile --windowed --icon=icon.ico --name=SmartSpin2kFlasher smartspin2kflasher/__main__.py

    - name: Build with PyInstaller (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        python -m PyInstaller --clean --onefile --windowed --icon=icon.icns --name=SmartSpin2kFlasher smartspin2kflasher/__main__.py

    - name: Build with PyInstaller (ChromeOS)
      if: matrix.target == 'chromeos'
      run: |
        # Build with specific options for ChromeOS compatibility
        python -m PyInstaller --clean --onefile \
          --windowed \
          --icon=icon.ico \
          --name=SmartSpin2kFlasher-ChromeOS \
          --target-arch x86_64 \
          --hidden-import='pkg_resources.py2_warn' \
          smartspin2kflasher/__main__.py

    - name: Upload artifacts (Standard)
      if: matrix.target != 'chromeos'
      uses: actions/upload-artifact@v4
      with:
        name: SmartSpin2kFlasher-${{ matrix.os }}
        path: |
          dist/SmartSpin2kFlasher*

    - name: Upload artifacts (ChromeOS)
      if: matrix.target == 'chromeos'
      uses: actions/upload-artifact@v4
      with:
        name: SmartSpin2kFlasher-ChromeOS
        path: |
          dist/SmartSpin2kFlasher-ChromeOS*

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')

    steps:
    - uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v1
      with:
        files: artifacts/**/*
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
